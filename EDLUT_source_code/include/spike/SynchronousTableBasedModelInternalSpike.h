/***************************************************************************
 *                           SynchronousTableBasedModelInternalSpike.h              *
 *                           -------------------                           *
 * copyright            : (C) 2015 by Francisco Naveros                    *
 * email                : fnaveros@ugr.es                                  *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef SYNCHRONOUSTABLEBASEDMODELINTERNALSPIKE_H_
#define SYNCHRONOUSTABLEBASEDMODELINTERNALSPIKE_H_

/*!
 * \file SynchronousTableBasedModelInternalSpike.h
 *
 * \author Francisco Naveros
 * \date May 2015
 *
 * This file declares a class which can implement a groupe of internal spike in only one event. This event is associate with the neuron model
 * SynchronousTableBasedModel.
 */
 
#include <iostream>

#include "./InternalSpike.h"

using namespace std;

class Neuron;
class Simulation;
class EventDrivenNeuronModel;
class VectorNeuronState;
class PropagatedSpikeGroup;
class NeuronModelPropagationDelayStructure;

/*!
 * \class EventDrivenInternalSpike
 *
 * \brief Neural network internal spike.
 *
 * This class abstract the concept of spike. An internal spike is an event generated by the own cell
 * without external excitation.
 *
 * \author Francisco Naveros
 * \date May 2015
 */
class SynchronousTableBasedModelInternalSpike: public InternalSpike{
	
	public:

		/*!
		* \brief virtual time.
		*/
		double VirtualTime;

   		
  	
   		/*!
   		 * \brief Constructor with parameters.
   		 * 
   		 * It creates and initializes a new spike with the parameters.
   		 * 
   		 * \param NewTime Time of the new spike.
		 * \param NewQueueIndex Queue index where the event is stored
   		 */
		SynchronousTableBasedModelInternalSpike(double NewTime, int NewQueueIndex, Neuron * NewSource, double NewVirtualTime);

   		
   		/*!
   		 * \brief Class destructor.
   		 * 
   		 * It destroies an object of this class.
   		 */
   		virtual ~SynchronousTableBasedModelInternalSpike();
   	

   		/*!
   		 * \brief It process an event in the simulation with the option of real time available.
   		 * 
   		 * It process an event in the simulation with the option of real time available.
   		 * 
   		 * \param CurrentSimulation The simulation object where the event is working.
		 * \param RealTimeRestriction watchdog variable executed in a parallel OpenMP thread that
		 * control the consumed time in each slot.
   		 */
		virtual void ProcessEvent(Simulation * CurrentSimulation, RealTimeRestrictionLevel RealTimeRestriction);

		/*!
   		 * \brief It process an event in the simulation without the option of real time available.
   		 * 
   		 * It process an event in the simulation without the option of real time available.
   		 * 
   		 * \param CurrentSimulation The simulation object where the event is working.
   		 */
		virtual void ProcessEvent(Simulation * CurrentSimulation);
   		 
    	/*!
   		 * \brief this method print the event type.
   		 * 
   		 * This method print the event type..
		 */  		
		virtual void PrintType();

		/*!
   		 * \brief The event queue uses this preference variable to sort the events with the same time stamp.
   		 * 
   		 * The event queue uses this preference variable to sort the events with the same time stamp.
		 */
		virtual enum EventPriority ProcessingPriority();


		double GetVirtualTime();



};

#endif /*SYNCHRONOUSTABLEBASEDMODELINTERNALSPIKE_H_*/
