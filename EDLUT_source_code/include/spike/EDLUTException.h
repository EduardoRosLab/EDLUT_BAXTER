/***************************************************************************
 *                           EDLUTException.h                              *
 *                           -------------------                           *
 * copyright            : (C) 2009 by Jesus Garrido and Richard Carrillo   *
 * email                : jgarrido@atc.ugr.es                              *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef EDLUTEXCEPTION_H_
#define EDLUTEXCEPTION_H_

/*!
 * \file EDLUTException.h
 *
 * \author Jesus Garrido
 * \author Richard Carrido
 * \date August 2008
 *
 * This file declares a class which abstracts an exception in the EDLUT simulation process.
 */

#include <cstdlib>
#include <cstdio>
#include <iostream>

using namespace std;



typedef enum {
	TASK_OK, 
	TASK_FILE_INPUT_SPIKE_DRIVER, 
	TASK_FILE_INPUT_CURRENT_DRIVER,
	TASK_FILE_OUTPUT_SPIKE_DRIVER, 
	TASK_INTEGRATION_METHOD_TYPE, 
	TASK_BI_FIXED_STEP_LOAD, 
	TASK_FIXED_STEP_LOAD, 
	TASK_FIXED_STEP_SRM_LOAD, 
	TASK_LEARNING_RULE_LOAD,

	TASK_NETWORK_LOAD, TASK_NETWORK_LOAD_NEURON_MODELS, TASK_NETWORK_LOAD_LEARNING_RULES, TASK_NETWORK_LOAD_SYNAPSES, 

	TASK_WEIGHTS_LOAD, TASK_WEIGHTS_SAVE,

	TASK_NEURON_MODEL_TABLE, TASK_NEURON_MODEL_TABLE_LOAD, TASK_NEURON_MODEL_TABLE_TABLES_STRUCTURE, TASK_TABLE_BASED_MODEL_LOAD,

	TASK_SRM_TIME_DRIVEN_MODEL_LOAD,
	TASK_LIF_TIME_DRIVEN_MODEL_1_2_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_2_NEW_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_2_GPU_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_2_GPU_NEW_LOAD, 
	TASK_LIF_TIME_DRIVEN_MODEL_1_3_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_3_NEW_LOAD,
	TASK_LIF_TIME_DRIVEN_MODEL_1_4_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_4_NEW_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_4_GPU_LOAD, TASK_LIF_TIME_DRIVEN_MODEL_1_4_GPU_NEW_LOAD, 
	TASK_ADEX_TIME_DRIVEN_MODEL_LOAD, TASK_ADEX_TIME_DRIVEN_MODEL_GPU_LOAD,
	TASK_HH_TIME_DRIVEN_MODEL_LOAD, TASK_HH_TIME_DRIVEN_MODEL_GPU_LOAD, TASK_ORIGINAL_HH_TIME_DRIVEN_MODEL_LOAD,
	TASK_IZHIKEVICH_TIME_DRIVEN_MODEL_LOAD, TASK_IZHIKEVICH_TIME_DRIVEN_MODEL_GPU_LOAD,
	TASK_TIME_DRIVEN_PURKINJE_CELL_LOAD, TASK_TIME_DRIVEN_PURKINJE_CELL_GPU_LOAD, TASK_TIME_DRIVEN_PURKINJE_CELL_IP_LOAD, 
	TASK_EGIDIO_GRANULE_CELL_TIME_DRIVEN_LOAD, TASK_EGIDIO_GRANULE_CELL_TIME_DRIVEN_GPU_LOAD,
	TASK_TIME_DRIVEN_INFERIOR_OLIVE_CELL_LOAD,
	TASK_TIME_DRIVEN_SIN_CURRENT_GENERATOR_LOAD,
	TASK_TIME_DRIVEN_INPUT_DEVICE_LOAD,
}TASK_CODE;

typedef enum {
	ERROR_OK,
	ERROR_FILE_INPUT_SPIKE_DRIVER_OPEN_FILE, ERROR_FILE_INPUT_SPIKE_DRIVER_TOO_MUCH_SPIKES, ERROR_FILE_INPUT_SPIKE_DRIVER_NEURON_INDEX, ERROR_FILE_INPUT_SPIKE_DRIVER_FEW_SPIKES, ERROR_FILE_INPUT_SPIKE_DRIVER_N_SPIKES,
	ERROR_FILE_INPUT_CURRENT_DRIVER_OPEN_FILE, ERROR_FILE_INPUT_CURRENT_DRIVER_TOO_MUCH_CURRENTS, ERROR_FILE_INPUT_CURRENT_DRIVER_NEURON_INDEX, ERROR_FILE_INPUT_CURRENT_DRIVER_FEW_CURRENTS, ERROR_FILE_INPUT_CURRENT_DRIVER_N_CURRENTS,
	ERROR_FILE_OUTPUT_SPIKE_DRIVER_OPEN_FILE, ERROR_FILE_OUTPUT_SPIKE_DRIVER_WRITE,
	ERROR_INTEGRATION_METHOD_TYPE, ERROR_INTEGRATION_METHOD_READ,
	ERROR_BI_FIXED_STEP_STEP_SIZE, ERROR_BI_FIXED_STEP_READ_STEP, ERROR_BI_FIXED_STEP_GLOBAL_LOCAL_RATIO, ERROR_BI_FIXED_STEP_READ_GLOBAL_LOCAL_RATIO,
	ERROR_FIXED_STEP_STEP_SIZE, ERROR_FIXED_STEP_READ_STEP,

	ERROR_NETWORK_NEURON_MODEL_TYPE, ERROR_NETWORK_NEURON_MODEL_NUMBER, ERROR_NETWORK_NEURON_MODEL_LOAD_NUMBER, ERROR_NETWORK_NUMBER_OF_NEURONS, ERROR_NETWORK_NEURON_PARAMETERS, ERROR_NETWORK_ALLOCATE, ERROR_NETWORK_READ_NUMBER_OF_NEURONS,
	ERROR_NETWORK_LEARNING_RULE_TYPE, ERROR_NETWORK_LEARNING_RULE_LOAD, ERROR_NETWORK_LEARNING_RULE_NUMBER,
	ERROR_NETWORK_SYNAPSES_FIRST_LEARNING_RULE_INDEX, ERROR_NETWORK_SYNAPSES_FIRST_LEARNING_RULE_LOAD, ERROR_NETWORK_SYNAPSES_SECOND_LEARNING_RULE_INDEX, ERROR_NETWORK_SYNAPSES_SECOND_LEARNING_RULE_LOAD,
	ERROR_NETWORK_SYNAPSES_NUMBER, ERROR_NETWORK_SYNAPSES_NEURON_INDEX, ERROR_NETWORK_SYNAPSES_LEARNING_RULE_NON_TRIGGER, ERROR_NETWORK_SYNAPSES_LEARNING_RULE_TRIGGER, ERROR_NETWORK_SYNAPSES_LOAD, ERROR_NETWORK_SYNAPSES_LOAD_NUMBER, ERROR_NETWORK_SYNAPSES_TYPE, 
	ERROR_NETWORK_OPEN, 

	ERROR_WEIGHTS_OPEN, ERROR_WEIGHTS_READ, ERROR_WEIGHTS_NUMBER, ERROR_WEIGHTS_SAVE, ERROR_WEIGHTS_SAVE_OPEN,

	ERROR_LEARNING_RULE_LOAD,
	ERROR_ADDITIVE_KERNEL_CHANGE_VALUES,
	ERROR_COS_WEIGHT_CHANGE_TAU, ERROR_COS_WEIGHT_CHANGE_EXPONENT,
	ERROR_SIN_WEIGHT_CHANGE_EXPONENT,
	ERROR_EXP_OPTIMISED_BUFFERED_WEIGHT_CHANGE_INIT_TIME,
	ERROR_COS_SIN_WEIGHT_CHANGE_AMPLITUDE, ERROR_COS_SIN_WEIGHT_CHANGE_SIGNS,
	ERROR_STDP_WEIGHT_CHANGE_TAUS,

	ERROR_NEURON_MODEL_OPEN,

	ERROR_NEURON_MODEL_TABLE_ALLOCATE, ERROR_NEURON_MODEL_TABLE_NOT_ENOUGH_DATA, ERROR_NEURON_MODEL_TABLE_TOO_BIG, ERROR_NEURON_MODEL_TABLE_EMPTY, ERROR_NEURON_MODEL_TABLE_TABLE_NUMBER, ERROR_NEURON_MODEL_TABLE_VARIABLE_INDEX, ERROR_NEURON_MODEL_TABLE_DIMENSION_NUMBER,
	ERROR_TABLE_BASED_MODEL_OPEN, ERROR_TABLE_BASED_MODEL_NUMBER_OF_STATE_VARIABLES, ERROR_TABLE_BASED_MODEL_INDEX, ERROR_TABLE_BASED_MODEL_INITIAL_VALUES, ERROR_TABLE_BASED_MODEL_FIRING_INDEX, ERROR_TABLE_BASED_MODEL_END_FIRING_INDEX, ERROR_TABLE_BASED_MODEL_NUMBER_OF_SYNAPSES, ERROR_TABLE_BASED_MODEL_SYNAPSE_INDEXS, ERROR_TABLE_BASED_MODEL_NUMBER_OF_TABLES, ERROR_TABLE_BASED_MODEL_LAST_SPIKE, ERROR_TABLE_BASED_MODEL_SEED, ERROR_TABLE_BASED_MODEL_TIME_SCALE, ERROR_TABLE_BASED_MODEL_SYNCHRONIZATION_PERIOD, 
	
	ERROR_SRM_TIME_DRIVEN_MODEL_NUMBER_OF_CHANNELS, ERROR_SRM_TIME_DRIVEN_MODEL_TAUS, ERROR_SRM_TIME_DRIVEN_MODEL_VR, ERROR_SRM_TIME_DRIVEN_MODEL_W, ERROR_SRM_TIME_DRIVEN_MODEL_R0, ERROR_SRM_TIME_DRIVEN_MODEL_V0, ERROR_SRM_TIME_DRIVEN_MODEL_VF, ERROR_SRM_TIME_DRIVEN_MODEL_TAUABS, ERROR_SRM_TIME_DRIVEN_MODEL_TAUREL,
	ERROR_LIF_TIME_DRIVEN_MODEL_1_2_GREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_TREF, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_TINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_TEXC, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_CM, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_VTHR, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_EREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_EINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_EEXC, 
	ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_GREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_TREF, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_TINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_TEXC, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_CM, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_VTHR, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_EREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_EINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_2_NEW_EEXC,
	ERROR_LIF_TIME_DRIVEN_MODEL_1_3_GREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_TREF, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_TINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_TEXC, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_CM, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_VTHR, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_EREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_EINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_EEXC,
	ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_GREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_TREF, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_TINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_TEXC, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_CM, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_VTHR, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_EREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_EINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_3_NEW_EEXC,
	ERROR_LIF_TIME_DRIVEN_MODEL_1_4_FGJ, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_GREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_TREF, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_GAP, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_TINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_TNMDA, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_TAMPA, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_CM, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_VTHR, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_EREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_EINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_EEXC, 
	ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_FGJ, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_GREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_TREF, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_GAP, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_TINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_TNMDA, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_TAMPA, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_CM, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_VTHR, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_EREST, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_EINH, ERROR_LIF_TIME_DRIVEN_MODEL_1_4_NEW_EEXC,
	ERROR_ADEX_TIME_DRIVEN_MODEL_TINH, ERROR_ADEX_TIME_DRIVEN_MODEL_TEXC, ERROR_ADEX_TIME_DRIVEN_MODEL_CM, ERROR_ADEX_TIME_DRIVEN_MODEL_GLEAK, ERROR_ADEX_TIME_DRIVEN_MODEL_ELEAK, ERROR_ADEX_TIME_DRIVEN_MODEL_ERESET, ERROR_ADEX_TIME_DRIVEN_MODEL_EINH, ERROR_ADEX_TIME_DRIVEN_MODEL_EEXC, ERROR_ADEX_TIME_DRIVEN_MODEL_TAUW, ERROR_ADEX_TIME_DRIVEN_MODEL_VT, ERROR_ADEX_TIME_DRIVEN_MODEL_TSF, ERROR_ADEX_TIME_DRIVEN_MODEL_B, ERROR_ADEX_TIME_DRIVEN_MODEL_A,
	ERROR_HH_TIME_DRIVEN_MODEL_VT, ERROR_HH_TIME_DRIVEN_MODEL_EK, ERROR_HH_TIME_DRIVEN_MODEL_ENA, ERROR_HH_TIME_DRIVEN_MODEL_GKD, ERROR_HH_TIME_DRIVEN_MODEL_GNA, ERROR_HH_TIME_DRIVEN_MODEL_TINH, ERROR_HH_TIME_DRIVEN_MODEL_TEXC, ERROR_HH_TIME_DRIVEN_MODEL_VTHR, ERROR_HH_TIME_DRIVEN_MODEL_CM, ERROR_HH_TIME_DRIVEN_MODEL_GREST, ERROR_HH_TIME_DRIVEN_MODEL_EREST, ERROR_HH_TIME_DRIVEN_MODEL_EINH, ERROR_HH_TIME_DRIVEN_MODEL_EEXC,
	ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_TINH, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_TEXC, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_CM, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_EINH, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_EEXC, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_D, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_C, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_B, ERROR_IZHIKEVICH_TIME_DRIVEN_MODEL_A,
	ERROR_TIME_DRIVEN_INPUT_DEVICE_STEP_SIZE,
	ERROR_TIME_DRIVEN_SIN_CURRENT_GENERATOR_FREQUENCY, ERROR_TIME_DRIVEN_SIN_CURRENT_GENERATOR_PHASE, ERROR_TIME_DRIVEN_SIN_CURRENT_GENERATOR_AMPLITUDE, ERROR_TIME_DRIVEN_SIN_CURRENT_GENERATOR_OFFSET,

}ERROR_CODE;

typedef enum {
	REPAIR_OK,
	REPAIR_OPEN_FILE_READ, REPAIR_OPEN_FILE_WRITE,
	REPAIR_FILE_INPUT_SPIKE_DRIVER_TOO_MUCH_SPIKES, REPAIR_FILE_INPUT_SPIKE_DRIVER_NEURON_INDEX, REPAIR_FILE_INPUT_SPIKE_DRIVER_FEW_SPIKES, REPAIR_FILE_INPUT_SPIKE_DRIVER_N_SPIKES,
	REPAIR_FILE_INPUT_CURRENT_DRIVER_TOO_MUCH_CURRENTS, REPAIR_FILE_INPUT_CURRENT_DRIVER_NEURON_INDEX, REPAIR_FILE_INPUT_CURRENT_DRIVER_FEW_CURRENTS, REPAIR_FILE_INPUT_CURRENT_DRIVER_N_CURRENTS,
	REPAIR_INTEGRATION_METHOD_TYPE, REPAIR_INTEGRATION_METHOD_READ,
	REPAIR_BI_FIXED_STEP,
	REPAIR_FIXED_STEP,

	REPAIR_NETWORK_NEURON_MODEL_TYPE, REPAIR_NETWORK_NEURON_MODEL_NUMBER, REPAIR_NETWORK_NEURON_MODEL_LOAD_NUMBER, REPAIR_NETWORK_NUMBER_OF_NEURONS, REPAIR_NETWORK_NEURON_PARAMETERS, REPAIR_NETWORK_ALLOCATE, REPAIR_NETWORK_READ_NUMBER_OF_NEURONS,
	REPAIR_NETWORK_LEARNING_RULE_TYPE, REPAIR_NETWORK_LEARNING_RULE_LOAD, REPAIR_NETWORK_LEARNING_RULE_NUMBER,
	REPAIR_NETWORK_SYNAPSES_LEARNING_RULE_INDEX, REPAIR_NETWORK_SYNAPSES_NUMBER, REPAIR_NETWORK_SYNAPSES_NEURON_INDEX, REPAIR_NETWORK_SYNAPSES_LEARNING_RULE, REPAIR_NETWORK_SYNAPSES_LOAD, REPAIR_NETWORK_SYNAPSES_LOAD_NUMBER, REPAIR_NETWORK_SYNAPSES_TYPE,
	REPAIR_NETWORK_OPEN,

	REPAIR_WEIGHTS_OPEN, REPAIR_WEIGHTS_READ, REPARI_WEIGHTS_NUMBER, REPAIR_WEIGHTS_SAVE,

	REPAIR_LEARNING_RULE_VALUES,
	REPAIR_ADDITIVE_KERNEL_CHANGE_LOAD,
	REPAIR_COS_WEIGHT_CHANGE_LOAD,
	REPAIR_SIN_WEIGHT_CHANGE_LOAD,
	REPAIR_EXP_OPTIMISED_BUFFERED_WEIGHT_CHANGE_LOAD,
	REPAIR_COS_SIN_WEIGHT_CHANGE_LOAD,
	REPAIR_STDP_WEIGHT_CHANGE_LOAD,

	REPAIR_NEURON_MODEL_VALUES,
	REPAIR_NEURON_MODEL_NAME,
	REPAIR_NEURON_MODEL_TABLE_ALLOCATE, REPAIR_NEURON_MODEL_TABLE_NOT_ENOUGH_DATA, REPAIR_NEURON_MODEL_TABLE_TABLES_STRUCTURE,
	REPAIR_TABLE_BASED_MODEL_TIME_SCALE,
}REPAIR_CODE;




typedef struct{
	TASK_CODE code;
	char * msg;
}TASK_STRUCT;

typedef struct{
	ERROR_CODE code;
	char * msg;
}ERROR_STRUCT;

typedef struct{
	REPAIR_CODE code;
	char * msg;
}REPAIR_STRUCT;

/*!
 * \class EDLUTException
 *
 * \brief Exception in the simulation process.
 *
 * This class abstract the behaviour of an exception in the EDLUT simulation process. This exception
 * could happen by different reasons (not found files, bad input spikes, not enough memory...). When
 * an exception is thrown, the simulation is stopped without results.
 *
 * \author Jesus Garrido
 * \author Richard Carrillo
 * \date August 2008
 */
class EDLUTException {
	
	private:
		/*!
		 * Number of error.
		 */
		unsigned long long ErrorNum;

		/*!
		* Task code.
		*/
		TASK_CODE TaskCode;

		/*!
		* Error code.
		*/
		ERROR_CODE ErrorCode;

		/*!
		* Repair code.
		*/
		REPAIR_CODE RepairCode;
		
		/*!
		 * \brief It gets an only long number from four integer values.
		 * 
		 * It gets an only long number from four integer values.
		 * 
		 * \param task The task code
		 * \param error The error code
		 * \param repair The repair code
		 * 
		 * \return The error value from the three codes.
		 */
		unsigned long long CalculateErrorValue();
		
		/*!
		* Task messages.
		*/
		static const TASK_STRUCT TaskMsgs[];

		/*!
		* Error messages.
		*/
		static const ERROR_STRUCT ErrorMsgs[];

		/*!
		* Repair messages.
		*/
		static const REPAIR_STRUCT RepairMsgs[];
		
		
	public:
	
		/*!
		 * \brief Class constructor.
		 * 
		 * Class constructor with parameters.
		 * 
		 * \param task The task code
		 * \param error The error code
		 * \param repair The repair code
		 */ 
		EDLUTException(TASK_CODE task, ERROR_CODE error, REPAIR_CODE repair);
		
		/*!
		 * \brief It gets the error number.
		 * 
		 * It gets the error number.
		 * 
		 * \return The error number.
		 */ 
		unsigned long long GetErrorNum() const;
		
		/*!
		 * \brief It gets the task message.
		 * 
		 * It gets the task that threw the error.
		 * 
		 * \return The task message.
		 */
		const char * GetTaskMsg() const;
		
		/*!
		 * \brief It gets the error message.
		 * 
		 * It gets the error message.
		 * 
		 * \return The error message.
		 */
		const char * GetErrorMsg() const;
		
		/*!
		 * \brief It gets the repair message.
		 * 
		 * It gets the repair message.
		 * 
		 * \return The repair message.
		 */
		const char * GetRepairMsg() const;
		
		/*!
		 * \brief It prints in the standard error the error message of this exception.
		 * 
		 * It prints in the standard error the error message of this exception.
		 */
		void display_error() const;
		
};

/*!
 * \brief It prints the error message of this exception.
 * 
 * It prints the error message of this exception.
 * 
 * \param out The output stream where the message is printed.
 * \param Exception The exception to be printed.
 * 
 * \return The output stream.
 */
ostream & operator<< (ostream & out, EDLUTException Exception);

#endif /*EDLUTEXCEPTION_H_*/
